{"title":"Advanced Text-As-Data - Winter School - Iesp UERJ","markdown":{"yaml":{"title":"Advanced Text-As-Data - Winter School - Iesp UERJ","subtitle":"<span style = 'font-size: 140%;'> <br> Day 2: Word Embeddings","author":"<span style = 'font-size: 120%;'> Professor: Tiago Ventura </span>","execute":{"echo":false,"error":true,"cache":true},"format":{"revealjs":{"transition":"slide","background-transition":"fade","code-line-numbers":false,"width":1200,"height":800,"center":false,"slide-number":true,"incremental":false,"chalkboard":{"buttons":false},"preview-links":"auto","footer":"Text-as-Data","theme":["simple","custom.scss"]}},"editor_options":{"chunk_output_type":"console"}},"headingText":"Survey Responses","containsRefs":false,"markdown":"\n\n\nThank you so much for responding to the survey! Here are the most important feedback I receive:\n\n-   [more structured walk throughs of the code]{.midgray}\n\n-   [If you could a few resources we can look at for mathematical depth for class topic. Really enjoyed the in-depth discussion on LDA]{.midgray}\n\n-   [I hope we can have a few discussion questions along with weekly readings]{.midgray}\n\n-   [Including discussion of papers that are from non-polisci applications? For example, econ, sociology, psychology, etc.?]{.midgray}\n\n**Stop Doing:**\n\n-   [long alone time with code]{.midgray}\n\n-   [Sometimes we spend a bit too long on the recap part]{.midgray}\n\n## Plans for Today:\n\n-   Live coding from last class on topic models\n\n-   Word Embeddings\n\n    -   Semantics, Distributional Hypothesis, From Sparse to Dense Vectors\n\n    -   Word2Vec Algorithm\n\n        -   Mathematical Model\n\n        -   Estimate with Neural Networks\n\n-   Next week:\n\n    -   Start with coding to work with wordembeddings\n\n        -   Estimate from co-occurence matrices\n        -   Working with pre-trained models\n\n    -   Discuss applications to social science\n\n# `r fontawesome::fa(\"laptop-code\")` Coding!\n\n# Word Embeddings\n\n## Vector Space Model\n\nIn the vector space model, we learned:\n\n-   A document $D_i$ is represented as a collection of features $W$ (words, tokens, n-grams..)\n\n-   Each feature $w_i$ can be place in a real line, then a document $D_i$ is a point in a $W$ dimensional space.\n\nEmbedded in this model, there is the idea we represent [words]{.red} as a [one-hot encoding]{.red}.\n\n-   \"cat\": \\[0,0, 0, 0, 0, 0, 1, 0, ....., V\\] , on a V dimensional vector\n-   \"dog\": \\[0,0, 0, 0, 0, 0, 0, 1, ...., V\\], on a V dimensional vector\n\n**What these vectors look like?**\n\n-   really sparse\n\n-   vectors are orthogonal\n\n-   no natural notion of similarity\n\n# How can we embed some notion of meaning in the way we represent words?\n\n## Distributional Semantics\n\n> \"you shall know a word by the company it keeps.\" J. R. Firth 1957\n\n[Distributional semantics]{.red}: words that are used in the same contexts tend to be similar in their meaning.\n\n::: incremental\n-   How can we use this insight to build a word representation?\n\n    -   Move from sparse representation to dense representation\n\n    -   Represent words as vectors of numbers with high number of dimensions\n\n    -   Each feature on this vectors embeds some information from the word (gender? noun? sentiment? stance?)\n\n    -   Learn this representation from the unlabeled data.\n:::\n\n## Sparse vs Dense Vectors\n\n**One-hot encoding / Sparse Representation:**\n\n-   cat = $\\begin{bmatrix} 0,0, 0, 0, 0, 0, 1, 0, 0 \\end{bmatrix}$\n\n-   dog = $\\begin{bmatrix} 0,0, 0, 0, 0, 1, 0, 0, 0 \\end{bmatrix}$\n\n**Word Embedding / Dense Representation:**\n\n-   cat = $\\begin{bmatrix} 0.25, -0.75, 0.90, 0.12, -0.50, 0.33, 0.66, -0.88, 0.10, -0.45 \\end{bmatrix}$\n\n-   dog = $\\begin{bmatrix} 0.25, 1.75, 0.90, 0.12, -0.50, 0.33, 0.66, -0.88, 0.10, -0.45 \\end{bmatrix}$\n\n## With colors and real word vectors\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/embed_color.png\") \n```\n\nSource: [Illustrated Word2Vec](https://jalammar.github.io/illustrated-word2vec/)\n\n## Why Word Embeddings?\n\n**Encoding similarity:** vectors are not ortogonal anymore!\n\n**Automatic Generalization:** learn about one word allow us to automatically learn about related words\n\n**Encodes Meaning:** by learning the context, I can learn what a word means.\n\n**As a consequence:**\n\n-   Word Embeddings improves several NLP/Text-as-Data Tasks.\n\n-   Allows to deal with unseen words.\n\n-   Form the core idea of state-of-the-art models, such as LLMs.\n\n## Estimating Word Embeddings\n\n### Approches:\n\n::: fragment\n-   [Count-based methods]{.red}: look at how often words co-occur with neighbors.\n    -   use this matrix, and some some factorization to retrieve vectors for the words\n    -   GloVE\n    -   fast, not computationally intensive, but not the best representation\n    -   we will see code doing this next week\n:::\n\n::: fragment\n-   [Predictive Methods:]{.red} rely on the idea of **self-supervision**\n    -   use unlabeled data and use words to predict sequence\n    -   the famous word2vec.\n        -   Skipgram: predicts context words\n        -   Continuous Bag of Words: predict center word\n:::\n\n## Word2Vec: a framework for learning word vectors (Mikolov et al. 2013)\n\n### Core Idea:\n\n::: incremental\n-   We have a large corpus (\"body\") of text: a long list of words\n\n-   Every word in a fixed vocabulary is represented by a vector\n\n-   Go through each position t in the text, which has a center word $c$ and context (\"outside\") words $t$\n\n-   Use the similarity of the word vectors for $c$ and $t$ to calculate the probability of o given c (or vice versa)\n\n-   Keep adjusting the word vectors to maximize this probability\n\n    -   Neural Network + Gradient Descent\n:::\n\n## Skigram Example: Self-Supervision\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/skipgram_0.png\") \n```\n\nSource: [CS224N](https://web.stanford.edu/class/cs224n/index.html#schedule)\n\n## Skigram Example: Self-Supervision\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/skipgram.png\") \n```\n\nSource: [CS224N](https://web.stanford.edu/class/cs224n/index.html#schedule)\n\n## Encoding Similarity\n\nTo estimate the model, we first need to formalize the probability function we want to estimate.\n\n::: fragment\n#### This is similar to a [logistic regression]{.red}\n:::\n\n::: fragment\n-   **In logistic regression: probability of a event occur given data X and parameters** $\\beta$.:\n    -   \\$ P(y=1\\| X, \\beta ) = X \\* $\\beta$ \\$\n\n    -   $X*\\beta$ is not a proper probability function, so we make it to proper probability by using a logit transformation.\n\n    -   $P(y=1|X, \\beta ) = \\frac{exp(XB)}{1 + exp(XB)}$\n\n    -   Throw this transformation inside of a bernouilli distribution, get the likelihood function, and find the parameters using MLE.\n:::\n\n## Pametrizing $P(w_t|w_{t-1})$\n\n-   $P(w_t|w_{t-1})$ must be condition on how similar these words are.\n    -   [Exactly the same]{.red} intuition behind placing documents in the vector space model.\n    -   Now words are vectors!\n    -   $P(w_t|w_{t-1}) = u_c \\cdot u_t$\n        -   $u_c \\cdot u_t$\n        -   dot product between vectors\n        -   measures similarity using vector projection\n        -   $u_c$: center vector\n        -   $u_t$: target vectors\n-   $u_c \\cdot u_t$ is also not a proper probability distribution: Logit on them!\n\n$$P(w_t|w_{t-1}) = \\frac{exp(u_c \\cdot u_t)}{{\\sum_{w}^V exp(u_c*u_w)}}$$\n\n## Softmax Transformation\n\n$$P(w_t|w_{t-1}) = \\frac{exp(u_c \\cdot u_t)}{{\\sum_{w}^V exp(u_c*u_w)}}$$\n\n-   Dot product compares similarity between vectors\n\n-   numerator: center vs target vectors\n\n-   exponentiation makes everything positive\n\n-   Denominator: normalize over entire vocabulary to give probability distribution\n\n-   What is the meaning of softmax?\n\n    -   max: assign high values to be 1\n\n    -   soft: still assigns some probability to smaller values\n\n    -   generalization of the logit \\~ multinomial logistic function.\n\n## Word2Vec: Objective Function\n\n::: fragment\nFor each position $t$, predict context words within a window of fixed size $m$, given center word $w$.\n\n#### Likelihood Function\n\n$$ L(\\theta) = \\prod_{t=1}^{T} \\prod_{\\substack{-m<= j<=m \\\\ j \\neq 0}}^{m} P(w_{t+j} | w_t; \\theta) $$\n\n-   Assuming independence, this means you multiplying the probability of every target for every center word in your dictionary.\n\n-   This likelihood function will change if you do skipgram with negative sampling (See SLP chapter 6)\n:::\n\n::: fragment\n#### Objective Function: Negative log likelihood\n\n$$J(\\theta) = - \\frac{1}{T}log(L(\\theta))$$\n\n-   better to take the gradient with sums\n\n-   the average increases the numerical stability of the gradient.\n:::\n\n## Neural Networks: Brief overview\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/nn.png\") \n```\n\n## Skipgram Architecture\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/sg_arc.png\") \n```\n\n## Check your matrices\n\n::: columns\n::: {.column width=\"70%\"}\n```{r echo=FALSE, out.width = \"100%\"}\nknitr::include_graphics(\"./week7_figs/rustic.png\") \n```\n:::\n\n::: {.column width=\"30%\"}\n<br> <br> <br>\n\nPractice with a vocabulary of size 5, a embedding with 3 dimensions, and the task is to predict the next word.\n\n-   **Step 1: v_1\\^5 \\* W_5\\^3**\n\n-   **Step 2: w_1\\^3 \\* C_3\\^5**\n\n-   **Step 3: Softmax entire vector**\n:::\n:::\n\n## Word Embeddings Matrices\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/matrices.png\") \n```\n\n## Applications:\n\nOnce we've optimized, we can extract the word specific vectors from W as embedding vectors. These real valued vectors can be used for analogies and related tasks\n\n```{r echo=FALSE, out.width = \"80%\", fig.align=\"center\"}\nknitr::include_graphics(\"./week7_figs/king.png\") \n```\n\nWe will see several applications next week. Most important:\n\n-   Alternative to bag-of-words feature representation in supervised learning tasks\n\n-   Support for other automated text analysis tasks: expand dictionaries\n\n-   Understanding word meaning: variation over time, bias, variation by groups\n\n-   as a scaling method (in two weeks)\n\n## Training Embeddings\n\nEmbeddings need quite a lot of text to train: e.g. want to disambiguate meanings from contexts. You can download [pre-trained]{.red}, or get the code and [train locally]{.red}\n\n-   [Word2Vec]{.red} is trained on the Google News dataset (∼ 100B words, 2013)\n\n-   [GloVe]{.red} are trained on different things: Wikipedia (2014) + Gigaword (6B words), Common Crawl, Twitter. And uses a co-occurence matrix instead of Neural Networks\n\n-   [fastext]{.red} from facebook\n\n## Decisions on embeddings, Rodriguez and Spirling, 2022\n\nWhen using/training embeddings, we face four key decisions:\n\n-   Window size\n\n-   Number of dimensions for the embedding matrix\n\n-   Pre-trained versus locally fit variants\n\n-   Which algorithm to use?\n\n## Findings\n\n```{r echo=FALSE, out.width = \"100%\", fig.align=\"center\"}\nknitr::include_graphics(\"./week7_figs/rodriguez.png\") \n```\n\n-   popular, easily available pretrained embeddings perform at a level close to---or surpassing---both human coders andmore complicated locally fit models.\n\n-   GloVe pretrained word embeddings achieve on average---for the set of political queries---80% of human performance and are generally preferred to locally trained embeddings\n\n-   Larger window size and embeddings are often preferred.\n\n# More next week!\n","srcMarkdownNoYaml":"\n\n## Survey Responses\n\nThank you so much for responding to the survey! Here are the most important feedback I receive:\n\n-   [more structured walk throughs of the code]{.midgray}\n\n-   [If you could a few resources we can look at for mathematical depth for class topic. Really enjoyed the in-depth discussion on LDA]{.midgray}\n\n-   [I hope we can have a few discussion questions along with weekly readings]{.midgray}\n\n-   [Including discussion of papers that are from non-polisci applications? For example, econ, sociology, psychology, etc.?]{.midgray}\n\n**Stop Doing:**\n\n-   [long alone time with code]{.midgray}\n\n-   [Sometimes we spend a bit too long on the recap part]{.midgray}\n\n## Plans for Today:\n\n-   Live coding from last class on topic models\n\n-   Word Embeddings\n\n    -   Semantics, Distributional Hypothesis, From Sparse to Dense Vectors\n\n    -   Word2Vec Algorithm\n\n        -   Mathematical Model\n\n        -   Estimate with Neural Networks\n\n-   Next week:\n\n    -   Start with coding to work with wordembeddings\n\n        -   Estimate from co-occurence matrices\n        -   Working with pre-trained models\n\n    -   Discuss applications to social science\n\n# `r fontawesome::fa(\"laptop-code\")` Coding!\n\n# Word Embeddings\n\n## Vector Space Model\n\nIn the vector space model, we learned:\n\n-   A document $D_i$ is represented as a collection of features $W$ (words, tokens, n-grams..)\n\n-   Each feature $w_i$ can be place in a real line, then a document $D_i$ is a point in a $W$ dimensional space.\n\nEmbedded in this model, there is the idea we represent [words]{.red} as a [one-hot encoding]{.red}.\n\n-   \"cat\": \\[0,0, 0, 0, 0, 0, 1, 0, ....., V\\] , on a V dimensional vector\n-   \"dog\": \\[0,0, 0, 0, 0, 0, 0, 1, ...., V\\], on a V dimensional vector\n\n**What these vectors look like?**\n\n-   really sparse\n\n-   vectors are orthogonal\n\n-   no natural notion of similarity\n\n# How can we embed some notion of meaning in the way we represent words?\n\n## Distributional Semantics\n\n> \"you shall know a word by the company it keeps.\" J. R. Firth 1957\n\n[Distributional semantics]{.red}: words that are used in the same contexts tend to be similar in their meaning.\n\n::: incremental\n-   How can we use this insight to build a word representation?\n\n    -   Move from sparse representation to dense representation\n\n    -   Represent words as vectors of numbers with high number of dimensions\n\n    -   Each feature on this vectors embeds some information from the word (gender? noun? sentiment? stance?)\n\n    -   Learn this representation from the unlabeled data.\n:::\n\n## Sparse vs Dense Vectors\n\n**One-hot encoding / Sparse Representation:**\n\n-   cat = $\\begin{bmatrix} 0,0, 0, 0, 0, 0, 1, 0, 0 \\end{bmatrix}$\n\n-   dog = $\\begin{bmatrix} 0,0, 0, 0, 0, 1, 0, 0, 0 \\end{bmatrix}$\n\n**Word Embedding / Dense Representation:**\n\n-   cat = $\\begin{bmatrix} 0.25, -0.75, 0.90, 0.12, -0.50, 0.33, 0.66, -0.88, 0.10, -0.45 \\end{bmatrix}$\n\n-   dog = $\\begin{bmatrix} 0.25, 1.75, 0.90, 0.12, -0.50, 0.33, 0.66, -0.88, 0.10, -0.45 \\end{bmatrix}$\n\n## With colors and real word vectors\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/embed_color.png\") \n```\n\nSource: [Illustrated Word2Vec](https://jalammar.github.io/illustrated-word2vec/)\n\n## Why Word Embeddings?\n\n**Encoding similarity:** vectors are not ortogonal anymore!\n\n**Automatic Generalization:** learn about one word allow us to automatically learn about related words\n\n**Encodes Meaning:** by learning the context, I can learn what a word means.\n\n**As a consequence:**\n\n-   Word Embeddings improves several NLP/Text-as-Data Tasks.\n\n-   Allows to deal with unseen words.\n\n-   Form the core idea of state-of-the-art models, such as LLMs.\n\n## Estimating Word Embeddings\n\n### Approches:\n\n::: fragment\n-   [Count-based methods]{.red}: look at how often words co-occur with neighbors.\n    -   use this matrix, and some some factorization to retrieve vectors for the words\n    -   GloVE\n    -   fast, not computationally intensive, but not the best representation\n    -   we will see code doing this next week\n:::\n\n::: fragment\n-   [Predictive Methods:]{.red} rely on the idea of **self-supervision**\n    -   use unlabeled data and use words to predict sequence\n    -   the famous word2vec.\n        -   Skipgram: predicts context words\n        -   Continuous Bag of Words: predict center word\n:::\n\n## Word2Vec: a framework for learning word vectors (Mikolov et al. 2013)\n\n### Core Idea:\n\n::: incremental\n-   We have a large corpus (\"body\") of text: a long list of words\n\n-   Every word in a fixed vocabulary is represented by a vector\n\n-   Go through each position t in the text, which has a center word $c$ and context (\"outside\") words $t$\n\n-   Use the similarity of the word vectors for $c$ and $t$ to calculate the probability of o given c (or vice versa)\n\n-   Keep adjusting the word vectors to maximize this probability\n\n    -   Neural Network + Gradient Descent\n:::\n\n## Skigram Example: Self-Supervision\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/skipgram_0.png\") \n```\n\nSource: [CS224N](https://web.stanford.edu/class/cs224n/index.html#schedule)\n\n## Skigram Example: Self-Supervision\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/skipgram.png\") \n```\n\nSource: [CS224N](https://web.stanford.edu/class/cs224n/index.html#schedule)\n\n## Encoding Similarity\n\nTo estimate the model, we first need to formalize the probability function we want to estimate.\n\n::: fragment\n#### This is similar to a [logistic regression]{.red}\n:::\n\n::: fragment\n-   **In logistic regression: probability of a event occur given data X and parameters** $\\beta$.:\n    -   \\$ P(y=1\\| X, \\beta ) = X \\* $\\beta$ \\$\n\n    -   $X*\\beta$ is not a proper probability function, so we make it to proper probability by using a logit transformation.\n\n    -   $P(y=1|X, \\beta ) = \\frac{exp(XB)}{1 + exp(XB)}$\n\n    -   Throw this transformation inside of a bernouilli distribution, get the likelihood function, and find the parameters using MLE.\n:::\n\n## Pametrizing $P(w_t|w_{t-1})$\n\n-   $P(w_t|w_{t-1})$ must be condition on how similar these words are.\n    -   [Exactly the same]{.red} intuition behind placing documents in the vector space model.\n    -   Now words are vectors!\n    -   $P(w_t|w_{t-1}) = u_c \\cdot u_t$\n        -   $u_c \\cdot u_t$\n        -   dot product between vectors\n        -   measures similarity using vector projection\n        -   $u_c$: center vector\n        -   $u_t$: target vectors\n-   $u_c \\cdot u_t$ is also not a proper probability distribution: Logit on them!\n\n$$P(w_t|w_{t-1}) = \\frac{exp(u_c \\cdot u_t)}{{\\sum_{w}^V exp(u_c*u_w)}}$$\n\n## Softmax Transformation\n\n$$P(w_t|w_{t-1}) = \\frac{exp(u_c \\cdot u_t)}{{\\sum_{w}^V exp(u_c*u_w)}}$$\n\n-   Dot product compares similarity between vectors\n\n-   numerator: center vs target vectors\n\n-   exponentiation makes everything positive\n\n-   Denominator: normalize over entire vocabulary to give probability distribution\n\n-   What is the meaning of softmax?\n\n    -   max: assign high values to be 1\n\n    -   soft: still assigns some probability to smaller values\n\n    -   generalization of the logit \\~ multinomial logistic function.\n\n## Word2Vec: Objective Function\n\n::: fragment\nFor each position $t$, predict context words within a window of fixed size $m$, given center word $w$.\n\n#### Likelihood Function\n\n$$ L(\\theta) = \\prod_{t=1}^{T} \\prod_{\\substack{-m<= j<=m \\\\ j \\neq 0}}^{m} P(w_{t+j} | w_t; \\theta) $$\n\n-   Assuming independence, this means you multiplying the probability of every target for every center word in your dictionary.\n\n-   This likelihood function will change if you do skipgram with negative sampling (See SLP chapter 6)\n:::\n\n::: fragment\n#### Objective Function: Negative log likelihood\n\n$$J(\\theta) = - \\frac{1}{T}log(L(\\theta))$$\n\n-   better to take the gradient with sums\n\n-   the average increases the numerical stability of the gradient.\n:::\n\n## Neural Networks: Brief overview\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/nn.png\") \n```\n\n## Skipgram Architecture\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/sg_arc.png\") \n```\n\n## Check your matrices\n\n::: columns\n::: {.column width=\"70%\"}\n```{r echo=FALSE, out.width = \"100%\"}\nknitr::include_graphics(\"./week7_figs/rustic.png\") \n```\n:::\n\n::: {.column width=\"30%\"}\n<br> <br> <br>\n\nPractice with a vocabulary of size 5, a embedding with 3 dimensions, and the task is to predict the next word.\n\n-   **Step 1: v_1\\^5 \\* W_5\\^3**\n\n-   **Step 2: w_1\\^3 \\* C_3\\^5**\n\n-   **Step 3: Softmax entire vector**\n:::\n:::\n\n## Word Embeddings Matrices\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/matrices.png\") \n```\n\n## Applications:\n\nOnce we've optimized, we can extract the word specific vectors from W as embedding vectors. These real valued vectors can be used for analogies and related tasks\n\n```{r echo=FALSE, out.width = \"80%\", fig.align=\"center\"}\nknitr::include_graphics(\"./week7_figs/king.png\") \n```\n\nWe will see several applications next week. Most important:\n\n-   Alternative to bag-of-words feature representation in supervised learning tasks\n\n-   Support for other automated text analysis tasks: expand dictionaries\n\n-   Understanding word meaning: variation over time, bias, variation by groups\n\n-   as a scaling method (in two weeks)\n\n## Training Embeddings\n\nEmbeddings need quite a lot of text to train: e.g. want to disambiguate meanings from contexts. You can download [pre-trained]{.red}, or get the code and [train locally]{.red}\n\n-   [Word2Vec]{.red} is trained on the Google News dataset (∼ 100B words, 2013)\n\n-   [GloVe]{.red} are trained on different things: Wikipedia (2014) + Gigaword (6B words), Common Crawl, Twitter. And uses a co-occurence matrix instead of Neural Networks\n\n-   [fastext]{.red} from facebook\n\n## Decisions on embeddings, Rodriguez and Spirling, 2022\n\nWhen using/training embeddings, we face four key decisions:\n\n-   Window size\n\n-   Number of dimensions for the embedding matrix\n\n-   Pre-trained versus locally fit variants\n\n-   Which algorithm to use?\n\n## Findings\n\n```{r echo=FALSE, out.width = \"100%\", fig.align=\"center\"}\nknitr::include_graphics(\"./week7_figs/rodriguez.png\") \n```\n\n-   popular, easily available pretrained embeddings perform at a level close to---or surpassing---both human coders andmore complicated locally fit models.\n\n-   GloVe pretrained word embeddings achieve on average---for the set of political queries---80% of human performance and are generally preferred to locally trained embeddings\n\n-   Larger window size and embeddings are often preferred.\n\n# More next week!\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":true,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":false,"output-file":"day_2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.3.450","auto-stretch":true,"editor":"visual","title":"Advanced Text-As-Data - Winter School - Iesp UERJ","subtitle":"<span style = 'font-size: 140%;'> <br> Day 2: Word Embeddings","author":"<span style = 'font-size: 120%;'> Professor: Tiago Ventura </span>","editor_options":{"chunk_output_type":"console"},"transition":"slide","backgroundTransition":"fade","width":1200,"height":800,"center":false,"slideNumber":true,"chalkboard":{"buttons":false},"previewLinks":"auto","footer":"Text-as-Data","theme":["simple","custom.scss"]}}},"projectFormats":["html"]}