{"title":"Advanced Text-As-Data - Winter School - Iesp UERJ","markdown":{"yaml":{"title":"Advanced Text-As-Data - Winter School - Iesp UERJ","subtitle":"<span style = 'font-size: 140%;'> <br> Day 2: Word Embeddings: Theory and Practice","author":"<span style = 'font-size: 120%;'> Professor: Tiago Ventura </span>","execute":{"echo":false,"error":true,"cache":true},"format":{"revealjs":{"transition":"slide","background-transition":"fade","code-line-numbers":false,"width":1400,"height":900,"center":false,"slide-number":true,"incremental":true,"chalkboard":{"buttons":false},"preview-links":"auto","footer":"Text-as-Data","theme":["simple","custom.scss"]}},"editor_options":{"chunk_output_type":"console"}},"headingText":"Plans for Today","containsRefs":false,"markdown":"\n\n\n-   Word Embeddings\n\n    -   Semantics, Distributional Hypothesis, Moving from Sparse to Dense Vectors\n\n    -   Word2Vec Algorithm\n\n        -   Mathematical Model\n\n        -   Estimate with Neural Networks\n\n        -   Estimate using co-occurance matrices\n\n-   Practice\n\n    -   Work through:\n\n        -   Working with pre-trained models\n\n        -   Discuss Word Embeddings Applications\n         \n        -   time permits: estimating word embeddings with matrix factorization \n\n# Word Embeddings\n\n## Vector Space Model: From yesterday\n\nIn the vector space model, we learned:\n\n-   A document $D_i$ is represented as a collection of features $W$ (words, tokens, n-grams..)\n\n-   Each feature $w_i$ can be place in a real line, then a document $D_i$ is a point in a $W$ dimensional space.\n\n::: fragment\nEmbedded in this model, there is the idea we represent [words]{.red} as a [one-hot encoding]{.red}.\n\n-   \"cat\": \\[0,0, 0, 0, 0, 0, 1, 0, ....., V\\] , on a V dimensional vector\n-   \"dog\": \\[0,0, 0, 0, 0, 0, 0, 1, ...., V\\], on a V dimensional vector\n\n:::\n\n# How can we embed some notion of meaning in the way we represent words?\n\n## Distributional Semantics\n\n> \"you shall know a word by the company it keeps.\" J. R. Firth 1957\n\n[Distributional semantics]{.red}: words that are used in the same contexts tend to be similar in their meaning.\n\n::: incremental\n-   How can we use this insight to build a word representation?\n\n    -   Move from sparse representation to dense representation\n\n    -   Represent words as vectors of numbers with high number of dimensions\n\n    -   Each feature on this vectors embeds some information from the word (gender? noun? sentiment? stance?)\n\n    -   Learn this representation from the unlabeled data.\n:::\n\n## Sparse vs Dense Vectors\n\n:::nonincremental\n\n**One-hot encoding / Sparse Representation:**\n\n-   cat = $\\begin{bmatrix} 0,0, 0, 0, 0, 0, 1, 0, 0 \\end{bmatrix}$\n\n-   dog = $\\begin{bmatrix} 0,0, 0, 0, 0, 1, 0, 0, 0 \\end{bmatrix}$\n\n**Word Embedding / Dense Representation:**\n\n-   cat = $\\begin{bmatrix} 0.25, -0.75, 0.90, 0.12, -0.50, 0.33, 0.66, -0.88, 0.10, -0.45 \\end{bmatrix}$\n\n-   dog = $\\begin{bmatrix} 0.25, 1.75, 0.90, 0.12, -0.50, 0.33, 0.66, -0.88, 0.10, -0.45 \\end{bmatrix}$\n\n:::\n\n## Why Word Embeddings?\n\n**Encoding similarity:** vectors are not ortogonal anymore!\n\n**Encodes Meaning:** by learning the context, I can somewhat learn what a word means.\n\n**Automatic Generalization:** learn about one word allow us to automatically learn about related words\n\n**As a consequence:**\n\n-   Word Embeddings improves several NLP/Text-as-Data Tasks.\n\n-   Allows to deal with unseen words.\n\n-   Form the core idea of state-of-the-art models, such as LLMs.\n\n## Estimating Word Embeddings\n\n### Approches:\n\n::: fragment\n-   [Count-based methods]{.red}: look at how often words co-occur with neighbors.\n    -   Use this matrix, and use some factorization to retrieve vectors for the words\n    -   This approach is called \"GloVE\" algorithm\n    -   Fast, not computationally intensive, but not the best representation, because it is not fully local\n:::\n\n::: fragment\n-   [Neural Networks:]{.red} rely on the idea of **self-supervision**\n    -   use unlabeled data and use words to predict sequence\n    -   the famous **word2vec** algorithm\n        -   Skipgram: predicts context words\n        -   Continuous Bag of Words: predict center word\n:::\n\n## Word2Vec: a framework for learning word vectors (Mikolov et al. 2013)\n\n### Core Idea:\n\n::: incremental\n-   We have a large corpus (\"body\") of text: a long list of words\n\n-   Every word in a fixed vocabulary is represented by a vector\n\n-   Go through each position t in the text, which has a center word $c$ and context (\"outside\") words $t$\n\n-   Use the similarity of the word vectors for $c$ and $t$ to calculate the probability of o given c (or vice versa)\n\n-   Keep adjusting the word vectors to maximize this probability\n\n    -   Neural Network + Gradient Descent\n:::\n\n## Skigram Example: Self-Supervision\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/skipgram_0.png\") \n```\n\nSource: [CS224N](https://web.stanford.edu/class/cs224n/index.html#schedule)\n\n## Skigram Example: Self-Supervision\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/skipgram.png\") \n```\n\nSource: [CS224N](https://web.stanford.edu/class/cs224n/index.html#schedule)\n\n## Encoding Similarity\n\nTo estimate the model, we first need to formalize the probability function we want to estimate.\n\n::: fragment\n#### This is similar to a [logistic regression]{.red}\n:::\n\n::: fragment\n-   **In logistic regression: probability of a event occur given data X and parameters** $\\beta$:\n\n    $$ P(y=1| X, \\beta ) = X * \\beta  + \\epsilon$$ \n\n    -   $X * \\beta$ is not a proper probability function, so we make it to proper probability by using a logit transformation.\n\n    -   $P(y=1|X, \\beta ) = \\frac{exp(XB)}{1 + exp(XB)}$\n:::\n\n::: fragment\n\n- Use transformation inside of a bernouilli distribution, get the likelihood function, and find the parameters using maximum likelihood estimation:\n    \n  $$L(\\beta)  = \\prod_{i=1}^n \\bigl[\\sigma(X_i^\\top \\beta)\\bigr]^{y_i}\n                          \\bigl[1 - \\sigma(X_i^\\top \\beta)\\bigr]^{1 - y_i} $$\n    \n:::\n\n## $P(w_t|w_{t-1})$\n\nThis is the probability we want to estimate. To do so, we need to add parameters to it:\n\n-   $P(w_t|w_{t-1})$ represents how similar these words are.\n    -   [The jump:]{.red} if we assume words are vectors, we can estimate their similarities:\n    -   $P(w_t|w_{t-1}) = u_c \\cdot u_t$\n        -   $u_c \\cdot u_t$\n        -   dot product between vectors ($x_1*y_1 + x_2*y_2 .... x_n*y_n$)\n        -   measures similarity using vector projection\n        -   $u_c$: center vector\n        -   $u_t$: target/neighbor vectors\n        \n-   $u_c \\cdot u_t$ is also not a proper probability distribution. So we will use a softmax transformation. \n\n:::fragment\n\n$$P(w_t|w_{t-1}) = \\frac{exp(u_c \\cdot u_t)}{{\\sum_{w}^V exp(u_c*u_w)}}$$\n:::\n\n- mathematically, this is the logistic transformation (sigmoid) for multiple classes. \n\n## Softmax Transformation\n\n$$P(w_t|w_{t-1}) = \\frac{exp(u_c \\cdot u_t)}{{\\sum_{w}^V exp(u_c*u_w)}}$$\n\n-   Dot product compares similarity between vectors\n\n-   numerator: center vs target vectors\n\n-   exponentiation makes everything positive\n\n-   Denominator: normalize over entire vocabulary to give probability distribution\n\n-   What is the meaning of softmax?\n\n    -   max: assign high values to be 1\n\n    -   soft: still assigns some probability to smaller values\n\n    -   generalization of the logit \\~ multinomial logistic function.\n\n## Word2Vec: Objective Function\n\n::: fragment\nFor each position $t$, predict context words within a window of fixed size $m$, given center word $w$.\n\n#### Likelihood Function\n\n$$ L(\\theta) = \\prod_{t=1}^{T} \\prod_{\\substack{-m<= j<=m \\\\ j \\neq 0}}^{m} P(w_{t+j} | w_t; \\theta) $$\n\n-   Assuming independence, this means you multiplying the probability of every target for every center word in your dictionary.\n\n-   This likelihood function will change if you do skipgram with negative sampling (See SLP chapter 6)\n:::\n\n::: fragment\n#### Objective Function: Negative log likelihood\n\n$$J(\\theta) = - \\frac{1}{T}log(L(\\theta))$$\n\n-   better to take the gradient with sums\n\n-   the average increases the numerical stability of the gradient.\n:::\n\n## Neural Networks\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/nn.png\") \n```\n\n## Skipgram Architecture\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/sg_arc.png\") \n```\n\n## \n\n```{r echo=FALSE, out.width = \"100%\"}\nknitr::include_graphics(\"./week7_figs/rustic.png\") \n```\n\n## Simple Example\n\nLet's practice with a vocabulary of size 5, a embedding with 3 dimensions, and the task is to predict ONLY the next word.\n\n**Step 1: v_{1,5} \\* W_{5,3} = C_{1,3}**\n\n- Where W is the embedding for center words\n\n$$ \n\\mathbf{v} = \n\\begin{bmatrix}\n0 \\\\\n0 \\\\\n1 \\\\\n0 \\\\\n0\n\\end{bmatrix} \n$$\n\n$$ \n\\mathbf{W} =\n\\begin{bmatrix}\n.1 & .3 & -.23 \\\\\n.2 & -.06 & -.26 \\\\\n.3 & -.16& -.13 \\\\\n.5 & .26 & -.03 \\\\\n.6 & -.46 & -.53\n\\end{bmatrix}\n$$\n\n$$v_T*W = C = \\begin{bmatrix}.3 & -.16& -.13 \\end{bmatrix} $$ \n\n## Dot Product between vectors\n\n**Step 2:** $C_{1,3} * W2_{3,5} = P_{1,5}$ \n\n- Where $W_2$ is the embedding for context/target words\n\n:::fragment\n\n$$ C_{1,3} * W2_{3,5} = P_{1,5} $$\n\n$$ \\begin{bmatrix}.3 & -.16& -.13 \\end{bmatrix} * \n\\begin{bmatrix}\n.1 & .3 & -.23 & .3  & .5 \\\\\n.2 & -.06 & -.26 & .3  & .5 \\\\\n.3 & -.16& -.13 * .3  & .5\\\\\n\\end{bmatrix} $$\n\n$$\nP_{1,5}= \\begin{bmatrix} -0.041  &  0.1204 & -0.02233 & -0.023   & 0.07  \\end{bmatrix}\n$$\n:::\n\n## Take the softmax\n\n$$\nP(w_t|w_{t-1}) = \\frac{exp(0.041)}{{-0.041  +  0.1204 + -0.02233 + -0.023   + 0.07}}\n$$\n\n- Repeat this for all the words in the vocabulary. \n\n- After that, you calculate the loss function with the negative likelihood (because you know which word you are predicting)\n\n- Use the loss to perform gradient descent and update the parameters\n\n## Real Skipgram Algorithm\n\n```{r echo=FALSE, out.width = \"80%\"}\nknitr::include_graphics(\"./week7_figs/skipgram_matrices.png\") \n```\n\n## Word Embeddings Matrices\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/matrices.png\") \n```\n\n## Training Embeddings\n\nEmbeddings need quite a lot of text to train: e.g. want to disambiguate meanings from contexts. You can download [pre-trained]{.red}, or get the code and [train locally]{.red}\n\n-   [Word2Vec]{.red} is trained on the Google News dataset (∼ 100B words, 2013)\n\n-   [GloVe]{.red} are trained on different things: Wikipedia (2014) + Gigaword (6B words), Common Crawl, Twitter. And uses a co-occurence matrix instead of Neural Networks\n\n-   [fastext]{.red} from facebook\n\n## Applications:\n\nOnce we've optimized, we can extract the word specific vectors from W as embedding vectors. These real valued vectors can be used for analogies and related tasks\n\n```{r echo=FALSE, out.width = \"80%\", fig.align=\"center\"}\nknitr::include_graphics(\"./week7_figs/king.png\") \n```\n\n\n## Applications\n\nLet's discuss now several applications of embeddings on social science papers. These paper show:\n\n-   How to map words on cultural dimensions\n\n-   How to use embeddings to measure emotion in political language.\n\n-   And a favorite of political scientists, how to use embeddings to measure ideology.\n\n## Capturing cultural dimensions with embeddings\n\n> Austin C. Kozlowski, Austin C., Matt Taddy, and James A. Evans. 2019. \"The Geometry of Culture: Analyzing the Meanings of Class through Word Embeddings.\" American Sociological Review 84, no. 5: 905--49. https://doi.org/10.1177/0003122419877135.\n\n-   Word Embeddings can be use to capture cultural dimensions\n\n-   Dimensions of word embedding vector space models closely correspond to meaningful \"cultural dimensions,\" such as rich-poor, moral-immoral, and masculine-feminine.\n\n-   a word vector's position on these dimensions reflects the word's respective cultural associations\n\n## Method\n\n```{r echo=FALSE, out.width = \"100%\", fig.align=\"center\"}\nknitr::include_graphics(\"cultural_vector.jpg\") \n```\n\n## Results\n\n```{r echo=FALSE, out.width = \"100%\", fig.align=\"center\"}\nknitr::include_graphics(\"./week9_figs/culture_1.png\") \n```\n\n## Ideological Scaling\n\n> Rheault, Ludovic, and Christopher Cochrane. \"Word embeddings for the analysis of ideological placement in parliamentary corpora.\" Political Analysis 28, no. 1 (2020): 112-133.\n\n-   Can word vectors be used to produce scaling estimates of ideological placement on political text?\n\n    -   Yes, and word vectors are even better\n\n        -   It captures semantics\n\n        -   No need of training data (self-supervision)\n\n## Method\n\n```{r echo=FALSE, out.width = \"100%\"}\nknitr::include_graphics(\"./week9_figs/scaling_00.png\") \n```\n\n## Results\n\n::::: columns\n::: {.column width=\"50%\"}\n```{r echo=FALSE, out.width = \"100%\"}\nknitr::include_graphics(\"./week9_figs/scaling_01.png\") \n```\n:::\n\n::: {.column width=\"50%\"}\n```{r echo=FALSE, out.width = \"100%\"}\nknitr::include_graphics(\"./week9_figs/scaling_02.png\") \n```\n:::\n:::::\n\n## Measuring Emotion\n\n> Gennaro, Gloria, and Elliott Ash. \"Emotion and reason in political language.\" The Economic Journal 132, no. 643 (2022): 1037-1059.\n\n```{r echo=FALSE, out.width = \"90%\"}\nknitr::include_graphics(\"./week9_figs/emotion.png\") \n```\n\n## Method\n\n\n-   Building seed lists: They start with small seed lists of words clearly associated with “emotion” and “reason”\n\n-   Expanding dictionaries with word embeddings: Instead of just using these short lists, they expand them automatically using word embeddings.\n\n-   Emotionality Score:\n\n::: fragment\n$$\nY_i = \\frac{\\text{sim}(\\vec{d}_i, \\vec{A}) + b}{\\text{sim}(\\vec{d}_i, \\vec{C}) + b}\n$$\n\n:::\n\n# Coding","srcMarkdownNoYaml":"\n\n## Plans for Today\n\n-   Word Embeddings\n\n    -   Semantics, Distributional Hypothesis, Moving from Sparse to Dense Vectors\n\n    -   Word2Vec Algorithm\n\n        -   Mathematical Model\n\n        -   Estimate with Neural Networks\n\n        -   Estimate using co-occurance matrices\n\n-   Practice\n\n    -   Work through:\n\n        -   Working with pre-trained models\n\n        -   Discuss Word Embeddings Applications\n         \n        -   time permits: estimating word embeddings with matrix factorization \n\n# Word Embeddings\n\n## Vector Space Model: From yesterday\n\nIn the vector space model, we learned:\n\n-   A document $D_i$ is represented as a collection of features $W$ (words, tokens, n-grams..)\n\n-   Each feature $w_i$ can be place in a real line, then a document $D_i$ is a point in a $W$ dimensional space.\n\n::: fragment\nEmbedded in this model, there is the idea we represent [words]{.red} as a [one-hot encoding]{.red}.\n\n-   \"cat\": \\[0,0, 0, 0, 0, 0, 1, 0, ....., V\\] , on a V dimensional vector\n-   \"dog\": \\[0,0, 0, 0, 0, 0, 0, 1, ...., V\\], on a V dimensional vector\n\n:::\n\n# How can we embed some notion of meaning in the way we represent words?\n\n## Distributional Semantics\n\n> \"you shall know a word by the company it keeps.\" J. R. Firth 1957\n\n[Distributional semantics]{.red}: words that are used in the same contexts tend to be similar in their meaning.\n\n::: incremental\n-   How can we use this insight to build a word representation?\n\n    -   Move from sparse representation to dense representation\n\n    -   Represent words as vectors of numbers with high number of dimensions\n\n    -   Each feature on this vectors embeds some information from the word (gender? noun? sentiment? stance?)\n\n    -   Learn this representation from the unlabeled data.\n:::\n\n## Sparse vs Dense Vectors\n\n:::nonincremental\n\n**One-hot encoding / Sparse Representation:**\n\n-   cat = $\\begin{bmatrix} 0,0, 0, 0, 0, 0, 1, 0, 0 \\end{bmatrix}$\n\n-   dog = $\\begin{bmatrix} 0,0, 0, 0, 0, 1, 0, 0, 0 \\end{bmatrix}$\n\n**Word Embedding / Dense Representation:**\n\n-   cat = $\\begin{bmatrix} 0.25, -0.75, 0.90, 0.12, -0.50, 0.33, 0.66, -0.88, 0.10, -0.45 \\end{bmatrix}$\n\n-   dog = $\\begin{bmatrix} 0.25, 1.75, 0.90, 0.12, -0.50, 0.33, 0.66, -0.88, 0.10, -0.45 \\end{bmatrix}$\n\n:::\n\n## Why Word Embeddings?\n\n**Encoding similarity:** vectors are not ortogonal anymore!\n\n**Encodes Meaning:** by learning the context, I can somewhat learn what a word means.\n\n**Automatic Generalization:** learn about one word allow us to automatically learn about related words\n\n**As a consequence:**\n\n-   Word Embeddings improves several NLP/Text-as-Data Tasks.\n\n-   Allows to deal with unseen words.\n\n-   Form the core idea of state-of-the-art models, such as LLMs.\n\n## Estimating Word Embeddings\n\n### Approches:\n\n::: fragment\n-   [Count-based methods]{.red}: look at how often words co-occur with neighbors.\n    -   Use this matrix, and use some factorization to retrieve vectors for the words\n    -   This approach is called \"GloVE\" algorithm\n    -   Fast, not computationally intensive, but not the best representation, because it is not fully local\n:::\n\n::: fragment\n-   [Neural Networks:]{.red} rely on the idea of **self-supervision**\n    -   use unlabeled data and use words to predict sequence\n    -   the famous **word2vec** algorithm\n        -   Skipgram: predicts context words\n        -   Continuous Bag of Words: predict center word\n:::\n\n## Word2Vec: a framework for learning word vectors (Mikolov et al. 2013)\n\n### Core Idea:\n\n::: incremental\n-   We have a large corpus (\"body\") of text: a long list of words\n\n-   Every word in a fixed vocabulary is represented by a vector\n\n-   Go through each position t in the text, which has a center word $c$ and context (\"outside\") words $t$\n\n-   Use the similarity of the word vectors for $c$ and $t$ to calculate the probability of o given c (or vice versa)\n\n-   Keep adjusting the word vectors to maximize this probability\n\n    -   Neural Network + Gradient Descent\n:::\n\n## Skigram Example: Self-Supervision\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/skipgram_0.png\") \n```\n\nSource: [CS224N](https://web.stanford.edu/class/cs224n/index.html#schedule)\n\n## Skigram Example: Self-Supervision\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/skipgram.png\") \n```\n\nSource: [CS224N](https://web.stanford.edu/class/cs224n/index.html#schedule)\n\n## Encoding Similarity\n\nTo estimate the model, we first need to formalize the probability function we want to estimate.\n\n::: fragment\n#### This is similar to a [logistic regression]{.red}\n:::\n\n::: fragment\n-   **In logistic regression: probability of a event occur given data X and parameters** $\\beta$:\n\n    $$ P(y=1| X, \\beta ) = X * \\beta  + \\epsilon$$ \n\n    -   $X * \\beta$ is not a proper probability function, so we make it to proper probability by using a logit transformation.\n\n    -   $P(y=1|X, \\beta ) = \\frac{exp(XB)}{1 + exp(XB)}$\n:::\n\n::: fragment\n\n- Use transformation inside of a bernouilli distribution, get the likelihood function, and find the parameters using maximum likelihood estimation:\n    \n  $$L(\\beta)  = \\prod_{i=1}^n \\bigl[\\sigma(X_i^\\top \\beta)\\bigr]^{y_i}\n                          \\bigl[1 - \\sigma(X_i^\\top \\beta)\\bigr]^{1 - y_i} $$\n    \n:::\n\n## $P(w_t|w_{t-1})$\n\nThis is the probability we want to estimate. To do so, we need to add parameters to it:\n\n-   $P(w_t|w_{t-1})$ represents how similar these words are.\n    -   [The jump:]{.red} if we assume words are vectors, we can estimate their similarities:\n    -   $P(w_t|w_{t-1}) = u_c \\cdot u_t$\n        -   $u_c \\cdot u_t$\n        -   dot product between vectors ($x_1*y_1 + x_2*y_2 .... x_n*y_n$)\n        -   measures similarity using vector projection\n        -   $u_c$: center vector\n        -   $u_t$: target/neighbor vectors\n        \n-   $u_c \\cdot u_t$ is also not a proper probability distribution. So we will use a softmax transformation. \n\n:::fragment\n\n$$P(w_t|w_{t-1}) = \\frac{exp(u_c \\cdot u_t)}{{\\sum_{w}^V exp(u_c*u_w)}}$$\n:::\n\n- mathematically, this is the logistic transformation (sigmoid) for multiple classes. \n\n## Softmax Transformation\n\n$$P(w_t|w_{t-1}) = \\frac{exp(u_c \\cdot u_t)}{{\\sum_{w}^V exp(u_c*u_w)}}$$\n\n-   Dot product compares similarity between vectors\n\n-   numerator: center vs target vectors\n\n-   exponentiation makes everything positive\n\n-   Denominator: normalize over entire vocabulary to give probability distribution\n\n-   What is the meaning of softmax?\n\n    -   max: assign high values to be 1\n\n    -   soft: still assigns some probability to smaller values\n\n    -   generalization of the logit \\~ multinomial logistic function.\n\n## Word2Vec: Objective Function\n\n::: fragment\nFor each position $t$, predict context words within a window of fixed size $m$, given center word $w$.\n\n#### Likelihood Function\n\n$$ L(\\theta) = \\prod_{t=1}^{T} \\prod_{\\substack{-m<= j<=m \\\\ j \\neq 0}}^{m} P(w_{t+j} | w_t; \\theta) $$\n\n-   Assuming independence, this means you multiplying the probability of every target for every center word in your dictionary.\n\n-   This likelihood function will change if you do skipgram with negative sampling (See SLP chapter 6)\n:::\n\n::: fragment\n#### Objective Function: Negative log likelihood\n\n$$J(\\theta) = - \\frac{1}{T}log(L(\\theta))$$\n\n-   better to take the gradient with sums\n\n-   the average increases the numerical stability of the gradient.\n:::\n\n## Neural Networks\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/nn.png\") \n```\n\n## Skipgram Architecture\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/sg_arc.png\") \n```\n\n## \n\n```{r echo=FALSE, out.width = \"100%\"}\nknitr::include_graphics(\"./week7_figs/rustic.png\") \n```\n\n## Simple Example\n\nLet's practice with a vocabulary of size 5, a embedding with 3 dimensions, and the task is to predict ONLY the next word.\n\n**Step 1: v_{1,5} \\* W_{5,3} = C_{1,3}**\n\n- Where W is the embedding for center words\n\n$$ \n\\mathbf{v} = \n\\begin{bmatrix}\n0 \\\\\n0 \\\\\n1 \\\\\n0 \\\\\n0\n\\end{bmatrix} \n$$\n\n$$ \n\\mathbf{W} =\n\\begin{bmatrix}\n.1 & .3 & -.23 \\\\\n.2 & -.06 & -.26 \\\\\n.3 & -.16& -.13 \\\\\n.5 & .26 & -.03 \\\\\n.6 & -.46 & -.53\n\\end{bmatrix}\n$$\n\n$$v_T*W = C = \\begin{bmatrix}.3 & -.16& -.13 \\end{bmatrix} $$ \n\n## Dot Product between vectors\n\n**Step 2:** $C_{1,3} * W2_{3,5} = P_{1,5}$ \n\n- Where $W_2$ is the embedding for context/target words\n\n:::fragment\n\n$$ C_{1,3} * W2_{3,5} = P_{1,5} $$\n\n$$ \\begin{bmatrix}.3 & -.16& -.13 \\end{bmatrix} * \n\\begin{bmatrix}\n.1 & .3 & -.23 & .3  & .5 \\\\\n.2 & -.06 & -.26 & .3  & .5 \\\\\n.3 & -.16& -.13 * .3  & .5\\\\\n\\end{bmatrix} $$\n\n$$\nP_{1,5}= \\begin{bmatrix} -0.041  &  0.1204 & -0.02233 & -0.023   & 0.07  \\end{bmatrix}\n$$\n:::\n\n## Take the softmax\n\n$$\nP(w_t|w_{t-1}) = \\frac{exp(0.041)}{{-0.041  +  0.1204 + -0.02233 + -0.023   + 0.07}}\n$$\n\n- Repeat this for all the words in the vocabulary. \n\n- After that, you calculate the loss function with the negative likelihood (because you know which word you are predicting)\n\n- Use the loss to perform gradient descent and update the parameters\n\n## Real Skipgram Algorithm\n\n```{r echo=FALSE, out.width = \"80%\"}\nknitr::include_graphics(\"./week7_figs/skipgram_matrices.png\") \n```\n\n## Word Embeddings Matrices\n\n```{r echo=FALSE, out.width = \"70%\"}\nknitr::include_graphics(\"./week7_figs/matrices.png\") \n```\n\n## Training Embeddings\n\nEmbeddings need quite a lot of text to train: e.g. want to disambiguate meanings from contexts. You can download [pre-trained]{.red}, or get the code and [train locally]{.red}\n\n-   [Word2Vec]{.red} is trained on the Google News dataset (∼ 100B words, 2013)\n\n-   [GloVe]{.red} are trained on different things: Wikipedia (2014) + Gigaword (6B words), Common Crawl, Twitter. And uses a co-occurence matrix instead of Neural Networks\n\n-   [fastext]{.red} from facebook\n\n## Applications:\n\nOnce we've optimized, we can extract the word specific vectors from W as embedding vectors. These real valued vectors can be used for analogies and related tasks\n\n```{r echo=FALSE, out.width = \"80%\", fig.align=\"center\"}\nknitr::include_graphics(\"./week7_figs/king.png\") \n```\n\n\n## Applications\n\nLet's discuss now several applications of embeddings on social science papers. These paper show:\n\n-   How to map words on cultural dimensions\n\n-   How to use embeddings to measure emotion in political language.\n\n-   And a favorite of political scientists, how to use embeddings to measure ideology.\n\n## Capturing cultural dimensions with embeddings\n\n> Austin C. Kozlowski, Austin C., Matt Taddy, and James A. Evans. 2019. \"The Geometry of Culture: Analyzing the Meanings of Class through Word Embeddings.\" American Sociological Review 84, no. 5: 905--49. https://doi.org/10.1177/0003122419877135.\n\n-   Word Embeddings can be use to capture cultural dimensions\n\n-   Dimensions of word embedding vector space models closely correspond to meaningful \"cultural dimensions,\" such as rich-poor, moral-immoral, and masculine-feminine.\n\n-   a word vector's position on these dimensions reflects the word's respective cultural associations\n\n## Method\n\n```{r echo=FALSE, out.width = \"100%\", fig.align=\"center\"}\nknitr::include_graphics(\"cultural_vector.jpg\") \n```\n\n## Results\n\n```{r echo=FALSE, out.width = \"100%\", fig.align=\"center\"}\nknitr::include_graphics(\"./week9_figs/culture_1.png\") \n```\n\n## Ideological Scaling\n\n> Rheault, Ludovic, and Christopher Cochrane. \"Word embeddings for the analysis of ideological placement in parliamentary corpora.\" Political Analysis 28, no. 1 (2020): 112-133.\n\n-   Can word vectors be used to produce scaling estimates of ideological placement on political text?\n\n    -   Yes, and word vectors are even better\n\n        -   It captures semantics\n\n        -   No need of training data (self-supervision)\n\n## Method\n\n```{r echo=FALSE, out.width = \"100%\"}\nknitr::include_graphics(\"./week9_figs/scaling_00.png\") \n```\n\n## Results\n\n::::: columns\n::: {.column width=\"50%\"}\n```{r echo=FALSE, out.width = \"100%\"}\nknitr::include_graphics(\"./week9_figs/scaling_01.png\") \n```\n:::\n\n::: {.column width=\"50%\"}\n```{r echo=FALSE, out.width = \"100%\"}\nknitr::include_graphics(\"./week9_figs/scaling_02.png\") \n```\n:::\n:::::\n\n## Measuring Emotion\n\n> Gennaro, Gloria, and Elliott Ash. \"Emotion and reason in political language.\" The Economic Journal 132, no. 643 (2022): 1037-1059.\n\n```{r echo=FALSE, out.width = \"90%\"}\nknitr::include_graphics(\"./week9_figs/emotion.png\") \n```\n\n## Method\n\n\n-   Building seed lists: They start with small seed lists of words clearly associated with “emotion” and “reason”\n\n-   Expanding dictionaries with word embeddings: Instead of just using these short lists, they expand them automatically using word embeddings.\n\n-   Emotionality Score:\n\n::: fragment\n$$\nY_i = \\frac{\\text{sim}(\\vec{d}_i, \\vec{A}) + b}{\\text{sim}(\\vec{d}_i, \\vec{C}) + b}\n$$\n\n:::\n\n# Coding"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":true,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":true,"output-file":"day_2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.3.450","auto-stretch":true,"editor":"visual","title":"Advanced Text-As-Data - Winter School - Iesp UERJ","subtitle":"<span style = 'font-size: 140%;'> <br> Day 2: Word Embeddings: Theory and Practice","author":"<span style = 'font-size: 120%;'> Professor: Tiago Ventura </span>","editor_options":{"chunk_output_type":"console"},"transition":"slide","backgroundTransition":"fade","width":1400,"height":900,"center":false,"slideNumber":true,"chalkboard":{"buttons":false},"previewLinks":"auto","footer":"Text-as-Data","theme":["simple","custom.scss"]}}},"projectFormats":["html"]}