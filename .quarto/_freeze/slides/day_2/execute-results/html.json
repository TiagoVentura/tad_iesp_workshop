{
  "hash": "eebc7a32c629dd19f1516fea0be97fc6",
  "result": {
    "markdown": "---\ntitle: \"Advanced Text-As-Data - Winter School - Iesp UERJ\"\nsubtitle: \"<span style = 'font-size: 140%;'> <br> Day 2: Word Embeddings: Theory and Practice\"\nauthor: \"<span style = 'font-size: 120%;'> Professor: Tiago Ventura </span>\"\nexecute: \n  echo: false\n  error: true\n  cache: true\nformat:\n  revealjs: \n    transition: slide\n    background-transition: fade\n    code-line-numbers: false\n    width: 1200\n    height: 800\n    center: false\n    slide-number: true\n    incremental: false\n    chalkboard: \n      buttons: false\n    preview-links: auto\n    footer: \"Text-as-Data\"\n    theme: [simple, custom.scss]\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Plans for Today:\n\n-   Word Embeddings\n\n    -   Semantics, Distributional Hypothesis, Moving from Sparse to Dense Vectors\n\n    -   Word2Vec Algorithm\n\n        -   Mathematical Model\n\n        -   Estimate with Neural Networks\n        \n        -   Estimate using co-occurance matrices\n\n-   Practice\n\n    -   Work through: \n    \n        -   Estimating Word Embeddings\n    \n        -   Working with pre-trained models\n\n-   Discuss Word Embeddings Applications\n\n# Word Embeddings\n\n## Vector Space Model: From yesterday\n\nIn the vector space model, we learned:\n\n-   A document $D_i$ is represented as a collection of features $W$ (words, tokens, n-grams..)\n\n-   Each feature $w_i$ can be place in a real line, then a document $D_i$ is a point in a $W$ dimensional space.\n\nEmbedded in this model, there is the idea we represent [words]{.red} as a [one-hot encoding]{.red}.\n\n-   \"cat\": \\[0,0, 0, 0, 0, 0, 1, 0, ....., V\\] , on a V dimensional vector\n-   \"dog\": \\[0,0, 0, 0, 0, 0, 0, 1, ...., V\\], on a V dimensional vector\n\n**What these vectors look like?**\n\n-   really sparse\n\n-   vectors are orthogonal\n\n-   no natural notion of similarity\n\n# How can we embed some notion of meaning in the way we represent words?\n\n## Distributional Semantics\n\n> \"you shall know a word by the company it keeps.\" J. R. Firth 1957\n\n[Distributional semantics]{.red}: words that are used in the same contexts tend to be similar in their meaning.\n\n::: incremental\n-   How can we use this insight to build a word representation?\n\n    -   Move from sparse representation to dense representation\n\n    -   Represent words as vectors of numbers with high number of dimensions\n\n    -   Each feature on this vectors embeds some information from the word (gender? noun? sentiment? stance?)\n\n    -   Learn this representation from the unlabeled data.\n:::\n\n## Sparse vs Dense Vectors\n\n**One-hot encoding / Sparse Representation:**\n\n-   cat = $\\begin{bmatrix} 0,0, 0, 0, 0, 0, 1, 0, 0 \\end{bmatrix}$\n\n-   dog = $\\begin{bmatrix} 0,0, 0, 0, 0, 1, 0, 0, 0 \\end{bmatrix}$\n\n**Word Embedding / Dense Representation:**\n\n-   cat = $\\begin{bmatrix} 0.25, -0.75, 0.90, 0.12, -0.50, 0.33, 0.66, -0.88, 0.10, -0.45 \\end{bmatrix}$\n\n-   dog = $\\begin{bmatrix} 0.25, 1.75, 0.90, 0.12, -0.50, 0.33, 0.66, -0.88, 0.10, -0.45 \\end{bmatrix}$\n\n## With colors and real word vectors\n\n\n::: {.cell hash='day_2_cache/revealjs/unnamed-chunk-1_ca8ff4ff04723fcbc0599b7a19f54003'}\n::: {.cell-output-display}\n![](./week7_figs/embed_color.png){width=100%}\n:::\n:::\n\n\nSource: [Illustrated Word2Vec](https://jalammar.github.io/illustrated-word2vec/)\n\n## Why Word Embeddings?\n\n**Encoding similarity:** vectors are not ortogonal anymore!\n\n**Automatic Generalization:** learn about one word allow us to automatically learn about related words\n\n**Encodes Meaning:** by learning the context, I can learn what a word means.\n\n**As a consequence:**\n\n-   Word Embeddings improves several NLP/Text-as-Data Tasks.\n\n-   Allows to deal with unseen words.\n\n-   Form the core idea of state-of-the-art models, such as LLMs.\n\n## Estimating Word Embeddings\n\n### Approches:\n\n::: fragment\n-   [Count-based methods]{.red}: look at how often words co-occur with neighbors.\n    -   use this matrix, and some some factorization to retrieve vectors for the words\n    -   This approach is called \"GloVE\" algorithm\n    -   fast, not computationally intensive, but not the best representation\n    -   we will see code doing this next week\n:::\n\n::: fragment\n-   [Neural Networks:]{.red} rely on the idea of **self-supervision**\n    -   use unlabeled data and use words to predict sequence\n    -   the famous word2vec algorithm\n        -   Skipgram: predicts context words\n        -   Continuous Bag of Words: predict center word\n:::\n\n## Word2Vec: a framework for learning word vectors (Mikolov et al. 2013)\n\n### Core Idea:\n\n::: incremental\n\n-   We have a large corpus (\"body\") of text: a long list of words\n\n-   Every word in a fixed vocabulary is represented by a vector\n\n-   Go through each position t in the text, which has a center word $c$ and context (\"outside\") words $t$\n\n-   Use the similarity of the word vectors for $c$ and $t$ to calculate the probability of o given c (or vice versa)\n\n-   Keep adjusting the word vectors to maximize this probability\n\n    -   Neural Network + Gradient Descent\n:::\n\n## Skigram Example: Self-Supervision\n\n\n::: {.cell hash='day_2_cache/revealjs/unnamed-chunk-2_f61824843bfaa6d579dde0d7f9135ce2'}\n::: {.cell-output-display}\n![](./week7_figs/skipgram_0.png){width=70%}\n:::\n:::\n\n\nSource: [CS224N](https://web.stanford.edu/class/cs224n/index.html#schedule)\n\n## Skigram Example: Self-Supervision\n\n\n::: {.cell hash='day_2_cache/revealjs/unnamed-chunk-3_abafd56c25d0754a051d10738d14ed32'}\n::: {.cell-output-display}\n![](./week7_figs/skipgram.png){width=70%}\n:::\n:::\n\n\nSource: [CS224N](https://web.stanford.edu/class/cs224n/index.html#schedule)\n\n## Encoding Similarity\n\nTo estimate the model, we first need to formalize the probability function we want to estimate.\n\n::: fragment\n#### This is similar to a [logistic regression]{.red}\n:::\n\n::: fragment\n-   **In logistic regression: probability of a event occur given data X and parameters** $\\beta$.:\n    -   \\$ P(y=1\\| X, \\beta ) = X \\* $\\beta$ \\$\n\n    -   $X*\\beta$ is not a proper probability function, so we make it to proper probability by using a logit transformation.\n\n    -   $P(y=1|X, \\beta ) = \\frac{exp(XB)}{1 + exp(XB)}$\n\n    -   Throw this transformation inside of a bernouilli distribution, get the likelihood function, and find the parameters using MLE.\n:::\n\n## Pametrizing $P(w_t|w_{t-1})$\n\n-   $P(w_t|w_{t-1})$ must be condition on how similar these words are.\n    -   [Exactly the same]{.red} intuition behind placing documents in the vector space model.\n    -   Now words are vectors!\n    -   $P(w_t|w_{t-1}) = u_c \\cdot u_t$\n        -   $u_c \\cdot u_t$\n        -   dot product between vectors\n        -   measures similarity using vector projection\n        -   $u_c$: center vector\n        -   $u_t$: target vectors\n-   $u_c \\cdot u_t$ is also not a proper probability distribution: Logit on them!\n\n$$P(w_t|w_{t-1}) = \\frac{exp(u_c \\cdot u_t)}{{\\sum_{w}^V exp(u_c*u_w)}}$$\n\n## Softmax Transformation\n\n$$P(w_t|w_{t-1}) = \\frac{exp(u_c \\cdot u_t)}{{\\sum_{w}^V exp(u_c*u_w)}}$$\n\n-   Dot product compares similarity between vectors\n\n-   numerator: center vs target vectors\n\n-   exponentiation makes everything positive\n\n-   Denominator: normalize over entire vocabulary to give probability distribution\n\n-   What is the meaning of softmax?\n\n    -   max: assign high values to be 1\n\n    -   soft: still assigns some probability to smaller values\n\n    -   generalization of the logit \\~ multinomial logistic function.\n\n## Word2Vec: Objective Function\n\n::: fragment\nFor each position $t$, predict context words within a window of fixed size $m$, given center word $w$.\n\n#### Likelihood Function\n\n$$ L(\\theta) = \\prod_{t=1}^{T} \\prod_{\\substack{-m<= j<=m \\\\ j \\neq 0}}^{m} P(w_{t+j} | w_t; \\theta) $$\n\n-   Assuming independence, this means you multiplying the probability of every target for every center word in your dictionary.\n\n-   This likelihood function will change if you do skipgram with negative sampling (See SLP chapter 6)\n:::\n\n::: fragment\n#### Objective Function: Negative log likelihood\n\n$$J(\\theta) = - \\frac{1}{T}log(L(\\theta))$$\n\n-   better to take the gradient with sums\n\n-   the average increases the numerical stability of the gradient.\n\n:::\n\n## Neural Networks\n\n\n::: {.cell hash='day_2_cache/revealjs/unnamed-chunk-4_35ea84f6d8ec1830264d86f27f231cf6'}\n::: {.cell-output-display}\n![](./week7_figs/nn.png){width=70%}\n:::\n:::\n\n\n## Skipgram Architecture\n\n\n::: {.cell hash='day_2_cache/revealjs/unnamed-chunk-5_a316e088d971ddc4d75e6861781c3eb3'}\n::: {.cell-output-display}\n![](./week7_figs/sg_arc.png){width=70%}\n:::\n:::\n\n\n\n##\n\n\n::: {.cell hash='day_2_cache/revealjs/unnamed-chunk-6_49fd838bc97757de28bf1e39f6494d3e'}\n::: {.cell-output-display}\n![](./week7_figs/rustic.png){width=100%}\n:::\n:::\n\n\n\n## Check your matrices\n\n::: columns\n::: {.column width=\"70%\"}\n\n::: {.cell hash='day_2_cache/revealjs/unnamed-chunk-7_58506911827196b0d26ac9f26e391f57'}\n::: {.cell-output-display}\n![](./week7_figs/skipgram_matrices.png){width=100%}\n:::\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n<br> <br> <br>\n\nPractice with a vocabulary of size 5, a embedding with 3 dimensions, and the task is to predict the next word.\n\n-   **Step 1: v_1\\^5 \\* W_5\\^3**\n\n-   **Step 2: w_1\\^3 \\* C_3\\^5**\n\n-   **Step 3: Softmax entire vector**\n:::\n:::\n\n## Word Embeddings Matrices\n\n\n::: {.cell hash='day_2_cache/revealjs/unnamed-chunk-8_4e3490ed6f4a49c7da802b38d2871905'}\n::: {.cell-output-display}\n![](./week7_figs/matrices.png){width=70%}\n:::\n:::\n\n\n## Training Embeddings\n\nEmbeddings need quite a lot of text to train: e.g. want to disambiguate meanings from contexts. You can download [pre-trained]{.red}, or get the code and [train locally]{.red}\n\n-   [Word2Vec]{.red} is trained on the Google News dataset (∼ 100B words, 2013)\n\n-   [GloVe]{.red} are trained on different things: Wikipedia (2014) + Gigaword (6B words), Common Crawl, Twitter. And uses a co-occurence matrix instead of Neural Networks\n\n-   [fastext]{.red} from facebook\n\n## Applications:\n\nOnce we've optimized, we can extract the word specific vectors from W as embedding vectors. These real valued vectors can be used for analogies and related tasks\n\n\n::: {.cell layout-align=\"center\" hash='day_2_cache/revealjs/unnamed-chunk-9_c73877b45ff39701539139419f57a849'}\n::: {.cell-output-display}\n![](./week7_figs/king.png){fig-align='center' width=80%}\n:::\n:::\n\n\nWe will see several applications next week. Most important:\n\n-   Alternative to bag-of-words feature representation in supervised learning tasks\n\n-   Support for other automated text analysis tasks: expand dictionaries\n\n-   Understanding word meaning: variation over time, bias, variation by groups\n\n-   as a scaling method \n\n\n## Applications\n\nLet's discuss now several applications of embeddings on social science papers. These paper show:\n\n-   How to use embeddings to track semantic changes over time\n\n-   How to use embeddings to measure emotion in political language.\n\n-   How to use embeddings to measure gender and ethnic stereotypes\n\n-   And a favorite of political scientists, how to use embeddings to measure ideology.\n\n\n## Capturing cultural dimensions with embeddings\n\n> Austin C. Kozlowski, Austin C., Matt Taddy, and James A. Evans. 2019. \"The Geometry of Culture: Analyzing the Meanings of Class through Word Embeddings.\" American Sociological Review 84, no. 5: 905--49. https://doi.org/10.1177/0003122419877135.\n\n-   Word Embeddings can be use to capture cultural dimensions\n\n-   Dimensions of word embedding vector space models closely correspond to meaningful \"cultural dimensions,\" such as rich-poor, moral-immoral, and masculine-feminine.\n\n-   a word vector's position on these dimensions reflects the word's respective cultural associations\n\n\n## Method\n\n\n::: {.cell layout-align=\"center\" hash='day_2_cache/revealjs/unnamed-chunk-10_b72ed6bc65b389fa2f6702ac25f3b77f'}\n::: {.cell-output-display}\n![](cultural_vector.jpg){fig-align='center' width=100%}\n:::\n:::\n\n\n## Results\n\n\n::: {.cell layout-align=\"center\" hash='day_2_cache/revealjs/unnamed-chunk-11_ef6743d395cf933bf2a1a7afe04c4d29'}\n::: {.cell-output-display}\n![](./week9_figs/culture_1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Ideological Scaling\n\n> Rheault, Ludovic, and Christopher Cochrane. \"Word embeddings for the analysis of ideological placement in parliamentary corpora.\" Political Analysis 28, no. 1 (2020): 112-133.\n\n-   Can word vectors be used to produce scaling estimates of ideological placement on political text?\n\n    -   Yes, and word vectors are even better\n\n        -   It captures semantics\n\n        -   No need of training data (self-supervision)\n\n## Method\n\n\n::: {.cell hash='day_2_cache/revealjs/unnamed-chunk-12_f4326bc4c45a9947e4744b261b981496'}\n::: {.cell-output-display}\n![](./week9_figs/scaling_00.png){width=100%}\n:::\n:::\n\n\n\n## Results\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell hash='day_2_cache/revealjs/unnamed-chunk-13_8e8f28b8598bc22d2de077755d29a58e'}\n::: {.cell-output-display}\n![](./week9_figs/scaling_01.png){width=100%}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell hash='day_2_cache/revealjs/unnamed-chunk-14_d09acfdda3c3441a3f81a293868b85a4'}\n::: {.cell-output-display}\n![](./week9_figs/scaling_02.png){width=100%}\n:::\n:::\n\n:::\n:::\n\n## Measuring Emotion\n\n> Gennaro, Gloria, and Elliott Ash. \"Emotion and reason in political language.\" The Economic Journal 132, no. 643 (2022): 1037-1059.\n\n\n::: {.cell hash='day_2_cache/revealjs/unnamed-chunk-15_65cae1918171fbeb7debe965113d2c72'}\n::: {.cell-output-display}\n![](./week9_figs/emotion.png){width=90%}\n:::\n:::\n\n\n## Method\n\n- Building seed lists: They start with small seed lists of words clearly associated with “emotion” and “reason”\n\n- Expanding dictionaries with word embeddings: Instead of just using these short lists, they expand them automatically using word embeddings. \n\n- Emotionality Score: \n\n$$\nY_i = \\frac{\\text{sim}(\\vec{d}_i, \\vec{A}) + b}{\\text{sim}(\\vec{d}_i, \\vec{C}) + b}\n$$\n# Coding",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}