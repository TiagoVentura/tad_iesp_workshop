{
  "hash": "0feea956c16211d89b31efb76ff5b527",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Advanced Text-As-Data - Winter School - Iesp UERJ\"\nsubtitle: \"<span style = 'font-size: 140%;'> <br> Day 2: Word Embeddings\"\nauthor: \"<span style = 'font-size: 120%;'> Professor: Tiago Ventura </span>\"\nexecute: \n  echo: false\n  error: true\n  cache: true\nformat:\n  revealjs: \n    transition: slide\n    background-transition: fade\n    code-line-numbers: false\n    width: 1200\n    height: 800\n    center: false\n    slide-number: true\n    incremental: false\n    chalkboard: \n      buttons: false\n    preview-links: auto\n    footer: \"Text-as-Data\"\n    theme: [simple, custom.scss]\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n## Survey Responses\n\nThank you so much for responding to the survey! Here are the most important feedback I receive:\n\n-   [more structured walk throughs of the code]{.midgray}\n\n-   [If you could a few resources we can look at for mathematical depth for class topic. Really enjoyed the in-depth discussion on LDA]{.midgray}\n\n-   [I hope we can have a few discussion questions along with weekly readings]{.midgray}\n\n-   [Including discussion of papers that are from non-polisci applications? For example, econ, sociology, psychology, etc.?]{.midgray}\n\n**Stop Doing:**\n\n-   [long alone time with code]{.midgray}\n\n-   [Sometimes we spend a bit too long on the recap part]{.midgray}\n\n## Plans for Today:\n\n-   Live coding from last class on topic models\n\n-   Word Embeddings\n\n    -   Semantics, Distributional Hypothesis, From Sparse to Dense Vectors\n\n    -   Word2Vec Algorithm\n\n        -   Mathematical Model\n\n        -   Estimate with Neural Networks\n\n-   Next week:\n\n    -   Start with coding to work with wordembeddings\n\n        -   Estimate from co-occurence matrices\n        -   Working with pre-trained models\n\n    -   Discuss applications to social science\n\n# `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 640 512\" style=\"height:1em;width:1.25em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M64 96c0-35.3 28.7-64 64-64H512c35.3 0 64 28.7 64 64V352H512V96H128V352H64V96zM0 403.2C0 392.6 8.6 384 19.2 384H620.8c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8H76.8C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z\"/></svg>`{=html} Coding!\n\n# Word Embeddings\n\n## Vector Space Model\n\nIn the vector space model, we learned:\n\n-   A document $D_i$ is represented as a collection of features $W$ (words, tokens, n-grams..)\n\n-   Each feature $w_i$ can be place in a real line, then a document $D_i$ is a point in a $W$ dimensional space.\n\nEmbedded in this model, there is the idea we represent [words]{.red} as a [one-hot encoding]{.red}.\n\n-   \"cat\": \\[0,0, 0, 0, 0, 0, 1, 0, ....., V\\] , on a V dimensional vector\n-   \"dog\": \\[0,0, 0, 0, 0, 0, 0, 1, ...., V\\], on a V dimensional vector\n\n**What these vectors look like?**\n\n-   really sparse\n\n-   vectors are orthogonal\n\n-   no natural notion of similarity\n\n# How can we embed some notion of meaning in the way we represent words?\n\n## Distributional Semantics\n\n> \"you shall know a word by the company it keeps.\" J. R. Firth 1957\n\n[Distributional semantics]{.red}: words that are used in the same contexts tend to be similar in their meaning.\n\n::: incremental\n-   How can we use this insight to build a word representation?\n\n    -   Move from sparse representation to dense representation\n\n    -   Represent words as vectors of numbers with high number of dimensions\n\n    -   Each feature on this vectors embeds some information from the word (gender? noun? sentiment? stance?)\n\n    -   Learn this representation from the unlabeled data.\n:::\n\n## Sparse vs Dense Vectors\n\n**One-hot encoding / Sparse Representation:**\n\n-   cat = $\\begin{bmatrix} 0,0, 0, 0, 0, 0, 1, 0, 0 \\end{bmatrix}$\n\n-   dog = $\\begin{bmatrix} 0,0, 0, 0, 0, 1, 0, 0, 0 \\end{bmatrix}$\n\n**Word Embedding / Dense Representation:**\n\n-   cat = $\\begin{bmatrix} 0.25, -0.75, 0.90, 0.12, -0.50, 0.33, 0.66, -0.88, 0.10, -0.45 \\end{bmatrix}$\n\n-   dog = $\\begin{bmatrix} 0.25, 1.75, 0.90, 0.12, -0.50, 0.33, 0.66, -0.88, 0.10, -0.45 \\end{bmatrix}$\n\n## With colors and real word vectors\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./week7_figs/embed_color.png){width=70%}\n:::\n:::\n\n\n\nSource: [Illustrated Word2Vec](https://jalammar.github.io/illustrated-word2vec/)\n\n## Why Word Embeddings?\n\n**Encoding similarity:** vectors are not ortogonal anymore!\n\n**Automatic Generalization:** learn about one word allow us to automatically learn about related words\n\n**Encodes Meaning:** by learning the context, I can learn what a word means.\n\n**As a consequence:**\n\n-   Word Embeddings improves several NLP/Text-as-Data Tasks.\n\n-   Allows to deal with unseen words.\n\n-   Form the core idea of state-of-the-art models, such as LLMs.\n\n## Estimating Word Embeddings\n\n### Approches:\n\n::: fragment\n-   [Count-based methods]{.red}: look at how often words co-occur with neighbors.\n    -   use this matrix, and some some factorization to retrieve vectors for the words\n    -   GloVE\n    -   fast, not computationally intensive, but not the best representation\n    -   we will see code doing this next week\n:::\n\n::: fragment\n-   [Predictive Methods:]{.red} rely on the idea of **self-supervision**\n    -   use unlabeled data and use words to predict sequence\n    -   the famous word2vec.\n        -   Skipgram: predicts context words\n        -   Continuous Bag of Words: predict center word\n:::\n\n## Word2Vec: a framework for learning word vectors (Mikolov et al. 2013)\n\n### Core Idea:\n\n::: incremental\n-   We have a large corpus (\"body\") of text: a long list of words\n\n-   Every word in a fixed vocabulary is represented by a vector\n\n-   Go through each position t in the text, which has a center word $c$ and context (\"outside\") words $t$\n\n-   Use the similarity of the word vectors for $c$ and $t$ to calculate the probability of o given c (or vice versa)\n\n-   Keep adjusting the word vectors to maximize this probability\n\n    -   Neural Network + Gradient Descent\n:::\n\n## Skigram Example: Self-Supervision\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./week7_figs/skipgram_0.png){width=70%}\n:::\n:::\n\n\n\nSource: [CS224N](https://web.stanford.edu/class/cs224n/index.html#schedule)\n\n## Skigram Example: Self-Supervision\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./week7_figs/skipgram.png){width=70%}\n:::\n:::\n\n\n\nSource: [CS224N](https://web.stanford.edu/class/cs224n/index.html#schedule)\n\n## Encoding Similarity\n\nTo estimate the model, we first need to formalize the probability function we want to estimate.\n\n::: fragment\n#### This is similar to a [logistic regression]{.red}\n:::\n\n::: fragment\n-   **In logistic regression: probability of a event occur given data X and parameters** $\\beta$.:\n    -   \\$ P(y=1\\| X, \\beta ) = X \\* $\\beta$ \\$\n\n    -   $X*\\beta$ is not a proper probability function, so we make it to proper probability by using a logit transformation.\n\n    -   $P(y=1|X, \\beta ) = \\frac{exp(XB)}{1 + exp(XB)}$\n\n    -   Throw this transformation inside of a bernouilli distribution, get the likelihood function, and find the parameters using MLE.\n:::\n\n## Pametrizing $P(w_t|w_{t-1})$\n\n-   $P(w_t|w_{t-1})$ must be condition on how similar these words are.\n    -   [Exactly the same]{.red} intuition behind placing documents in the vector space model.\n    -   Now words are vectors!\n    -   $P(w_t|w_{t-1}) = u_c \\cdot u_t$\n        -   $u_c \\cdot u_t$\n        -   dot product between vectors\n        -   measures similarity using vector projection\n        -   $u_c$: center vector\n        -   $u_t$: target vectors\n-   $u_c \\cdot u_t$ is also not a proper probability distribution: Logit on them!\n\n$$P(w_t|w_{t-1}) = \\frac{exp(u_c \\cdot u_t)}{{\\sum_{w}^V exp(u_c*u_w)}}$$\n\n## Softmax Transformation\n\n$$P(w_t|w_{t-1}) = \\frac{exp(u_c \\cdot u_t)}{{\\sum_{w}^V exp(u_c*u_w)}}$$\n\n-   Dot product compares similarity between vectors\n\n-   numerator: center vs target vectors\n\n-   exponentiation makes everything positive\n\n-   Denominator: normalize over entire vocabulary to give probability distribution\n\n-   What is the meaning of softmax?\n\n    -   max: assign high values to be 1\n\n    -   soft: still assigns some probability to smaller values\n\n    -   generalization of the logit \\~ multinomial logistic function.\n\n## Word2Vec: Objective Function\n\n::: fragment\nFor each position $t$, predict context words within a window of fixed size $m$, given center word $w$.\n\n#### Likelihood Function\n\n$$ L(\\theta) = \\prod_{t=1}^{T} \\prod_{\\substack{-m<= j<=m \\\\ j \\neq 0}}^{m} P(w_{t+j} | w_t; \\theta) $$\n\n-   Assuming independence, this means you multiplying the probability of every target for every center word in your dictionary.\n\n-   This likelihood function will change if you do skipgram with negative sampling (See SLP chapter 6)\n:::\n\n::: fragment\n#### Objective Function: Negative log likelihood\n\n$$J(\\theta) = - \\frac{1}{T}log(L(\\theta))$$\n\n-   better to take the gradient with sums\n\n-   the average increases the numerical stability of the gradient.\n:::\n\n## Neural Networks: Brief overview\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./week7_figs/nn.png){width=70%}\n:::\n:::\n\n\n\n## Skipgram Architecture\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./week7_figs/sg_arc.png){width=70%}\n:::\n:::\n\n\n\n## Check your matrices\n\n::: columns\n::: {.column width=\"70%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./week7_figs/rustic.png){width=100%}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"30%\"}\n<br> <br> <br>\n\nPractice with a vocabulary of size 5, a embedding with 3 dimensions, and the task is to predict the next word.\n\n-   **Step 1: v_1\\^5 \\* W_5\\^3**\n\n-   **Step 2: w_1\\^3 \\* C_3\\^5**\n\n-   **Step 3: Softmax entire vector**\n:::\n:::\n\n## Word Embeddings Matrices\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./week7_figs/matrices.png){width=70%}\n:::\n:::\n\n\n\n## Applications:\n\nOnce we've optimized, we can extract the word specific vectors from W as embedding vectors. These real valued vectors can be used for analogies and related tasks\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./week7_figs/king.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nWe will see several applications next week. Most important:\n\n-   Alternative to bag-of-words feature representation in supervised learning tasks\n\n-   Support for other automated text analysis tasks: expand dictionaries\n\n-   Understanding word meaning: variation over time, bias, variation by groups\n\n-   as a scaling method (in two weeks)\n\n## Training Embeddings\n\nEmbeddings need quite a lot of text to train: e.g. want to disambiguate meanings from contexts. You can download [pre-trained]{.red}, or get the code and [train locally]{.red}\n\n-   [Word2Vec]{.red} is trained on the Google News dataset (∼ 100B words, 2013)\n\n-   [GloVe]{.red} are trained on different things: Wikipedia (2014) + Gigaword (6B words), Common Crawl, Twitter. And uses a co-occurence matrix instead of Neural Networks\n\n-   [fastext]{.red} from facebook\n\n## Decisions on embeddings, Rodriguez and Spirling, 2022\n\nWhen using/training embeddings, we face four key decisions:\n\n-   Window size\n\n-   Number of dimensions for the embedding matrix\n\n-   Pre-trained versus locally fit variants\n\n-   Which algorithm to use?\n\n## Findings\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./week7_figs/rodriguez.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n-   popular, easily available pretrained embeddings perform at a level close to---or surpassing---both human coders andmore complicated locally fit models.\n\n-   GloVe pretrained word embeddings achieve on average---for the set of political queries---80% of human performance and are generally preferred to locally trained embeddings\n\n-   Larger window size and embeddings are often preferred.\n\n# More next week!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}